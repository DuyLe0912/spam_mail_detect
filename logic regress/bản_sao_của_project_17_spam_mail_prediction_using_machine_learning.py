# -*- coding: utf-8 -*-
"""Bản sao của Project 17. Spam Mail Prediction using Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yxQNM7QPnjf-t2B6rMLvjOBnRkAJVj7z

Importing the Dependencies
"""


import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

"""Data Collection & Pre-Processing"""

# loading the data from csv file to a pandas Dataframe
raw_mail_data = pd.read_csv('mail_data.csv')


# replace the null values with a null string
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

# printing the first 5 rows of the dataframe
mail_data.head()

# checking the number of rows and columns in the dataframe
mail_data.shape

"""Label Encoding"""

# label spam mail as 0;  ham mail as 1;

mail_data.loc[mail_data['Category'] == 'spam', 'Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham', 'Category',] = 1

"""spam  -  0

ham  -  1
"""

# separating the data as texts and label

X = mail_data['Message']

Y = mail_data['Category']


"""Splitting the data into training data & test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.5, random_state=1)

"""Feature Extraction"""

# transform the text data to feature vectors that can be used as input to the Logistic regression

feature_extraction = TfidfVectorizer(min_df = 1, stop_words='english', lowercase='True')

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# convert Y_train and Y_test values as integers

Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')
#print(X_train)
#print(X_train_features)

"""Training the Model

Logistic Regression
"""

model = LogisticRegression()

# training the Logistic Regression model with the training data
model.fit(X_train_features, Y_train)

"""Evaluating the trained model"""

# prediction on training data

prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)
precision_on_training_data = precision_score(Y_train, prediction_on_training_data)
Recall_on_training_data = recall_score(Y_train, prediction_on_training_data)
F1_on_training_data = f1_score(Y_train, prediction_on_training_data)
print("--------Evaluating Training Data-------------------")
print('Accuracy on training data : ', accuracy_on_training_data)
print('Precision on training data : ', precision_on_training_data)
print('Recall on training data : ', Recall_on_training_data)
print('F1 score on training data : ', F1_on_training_data)
print("------------------------------------------\n")

# prediction on test data

prediction_on_test_data = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test, prediction_on_test_data)
precision_on_test_data = precision_score(Y_test, prediction_on_test_data)
Recall_on_test_data = recall_score(Y_test, prediction_on_test_data)
F1_on_test_data = f1_score(Y_test, prediction_on_test_data)
print("---------Evaluating Test Data---------------------")
print('Accuracy on test data : ', accuracy_on_test_data)
print('Precision on test data : ', precision_on_test_data)
print('Recall on test data : ', Recall_on_test_data)
print('F1 score on test data : ', F1_on_test_data)
print("------------------------------------------\n")

"""Building a Predictive System"""
from tkinter import *
from tkinter import messagebox

window = Tk()
window.title("Spam Email Detection Using Logistic Regression")
window.minsize(width=400, height=500)
window.geometry("600x400")

# create the canvas for info
canvas = Canvas(window)
canvas.config()
canvas.pack(expand=True, fill=BOTH)

label = Frame(window)
label.place(relx=0.1, rely=0.15, relwidth=0.8, relheight=0.4)

# email input
text = Text(label,width=80,height=80)
text.pack(padx=20,pady=20)


def email_check():
  input_mail = [text.get("1.0",END)]

  # convert text to feature vectors
  input_data_features = feature_extraction.transform(input_mail)

  # making prediction

  prediction = model.predict(input_data_features)

  if (prediction[0] == 1):
    messagebox.showinfo("Result","This is a HAM email.")

  else:
    messagebox.showinfo("Result","This is a SPAM email.")
# Buttons
checkbtn = Button(window, text="Check", bg="white", fg="black", command=email_check)
checkbtn.place(relx=0.28, rely=0.82, relwidth=0.18, relheight=0.08)

closebtn = Button(window, text="Close", bg="white", fg="black", command=window.destroy)
closebtn.place(relx=0.53, rely=0.82, relwidth=0.18, relheight=0.08)

window.mainloop()

